--- geos-2.0.1/CYGWIN-PATCHES/README.orig	1970-01-01 02:00:00.000000000 +0200
+++ geos-2.0.1/CYGWIN-PATCHES/README	2004-10-11 15:07:11.000000000 +0200
@@ -0,0 +1,112 @@
+geos-2.0.1-1
+------------------------------------------
+The GEOS library (Geometry Engine - Open Source) 
+is a C++ port of the Java Topology Suite (JTS).
+Required by gdal, PostGIS and mapserver.
+geos-devel: static /usr/lib/libgeos.a built with -g is ~50MB
+
+Runtime requirements:
+  cygwin-1.5.11-1
+
+Build requirements: (additionally)
+  gcc-g++-3.4.1-1       or newer
+  libtool-devel-1.5.10  or newer
+  binutils-20040725-2   or newer
+  make-3.80-1           or newer
+  ash-20040127-1        or newer
+  fileutils-4.1         or newer
+  sed-4.1.2-1           or newer
+  m4-1.4-1
+
+  doxygen               (only if you want to build the docs also)
+
+Canonical homepage:
+  http://geos.refractions.net/
+
+Canonical download:
+  http://geos.refractions.net/geos-2.0.1.tar.bz2
+
+------------------------------------
+
+Build instructions:
+  unpack geos-<VER>-<REL>-src.tar.bz2
+    if you use setup to install this src package, it will be
+	 unpacked under /usr/src automatically
+  cd /usr/src
+  ./geos-<VER>-<REL>.sh all
+
+This will create:
+  /usr/src/geos-<VER>-<REL>.tar.bz2
+  /usr/src/geos-devel-<VER>-<REL>.tar.bz2
+  /usr/src/geos-<VER>-<REL>-src.tar.bz2
+
+Or use './geos-<VER>-<REL>.sh prep' to get a patched source directory
+
+-------------------------------------------
+
+Files in geos:
+
+  /usr/bin/cyggeos-2.dll
+  /usr/share/doc/Cygwin/geos-2.0.1.README
+
+Files in geos-devel:
+
+  /usr/bin/geos-config
+  /usr/include/geos/geom.h
+  /usr/include/geos/geomgraph.h
+  /usr/include/geos/geomgraphindex.h
+  /usr/include/geos/geomUtil.h
+  /usr/include/geos/geosAlgorithm.h
+  /usr/include/geos/indexBintree.h
+  /usr/include/geos/indexChain.h
+  /usr/include/geos/indexQuadtree.h
+  /usr/include/geos/indexStrtree.h
+  /usr/include/geos/indexSweepline.h
+  /usr/include/geos/io.h
+  /usr/include/geos/noding.h
+  /usr/include/geos/nodingSnapround.h
+  /usr/include/geos/opBuffer.h
+  /usr/include/geos/opDistance.h
+  /usr/include/geos/operation.h
+  /usr/include/geos/opLinemerge.h
+  /usr/include/geos/opOverlay.h
+  /usr/include/geos/opPolygonize.h
+  /usr/include/geos/opRelate.h
+  /usr/include/geos/opValid.h
+  /usr/include/geos/planargraph.h
+  /usr/include/geos/platform.h
+  /usr/include/geos/precision.h
+  /usr/include/geos/spatialIndex.h
+  /usr/include/geos/unload.h
+  /usr/include/geos/util.h
+  /usr/include/geos/version.h
+  /usr/include/geos.h
+  /usr/lib/libgeos.a
+  /usr/lib/libgeos.dll.a
+  /usr/lib/libgeos.la
+  /usr/share/doc/geos-2.0.1/AUTHORS
+  /usr/share/doc/geos-2.0.1/ChangeLog
+  /usr/share/doc/geos-2.0.1/COPYING
+  /usr/share/doc/geos-2.0.1/INSTALL
+  /usr/share/doc/geos-2.0.1/NEWS
+  /usr/share/doc/geos-2.0.1/README
+  /usr/share/doc/geos-2.0.1/TODO
+
+  no docs. See http://geos.refractions.net/ro/doxygen_docs/html instead.
+
+------------------
+
+Port Notes:
+
+----------  geos-2.0.1-2 -----------
+
+- first official geos packages, 
+  previously handled upstream by Norman Vine
+
+Cygwin port maintained by: Reini Urban <rurban@x-ray.at>
+Please report problems, suggestions, etc. dependent on their nature 
+to one of the following:
+
+    http://geos.refractions.net/mailman/listinfo/geos-devel
+    cygwin@cygwin.com
+
--- geos-2.0.1/CYGWIN-PATCHES/geos-devel.hint.orig	1970-01-01 02:00:00.000000000 +0200
+++ geos-2.0.1/CYGWIN-PATCHES/geos-devel.hint	2004-10-11 15:05:44.000000000 +0200
@@ -0,0 +1,9 @@
+sdesc: "GEOS library and includes"
+ldesc: "The GEOS library (Geometry Engine - Open Source) 
+is a C++ port of the Java Topology Suite (JTS).
+This includes all the OpenGIS =Simple Features for SQL= spatial
+predicate functions and spatial operators, as well as specific JTS
+topology functions such as IsValid()"
+external-source: geos
+category: Libs Science
+requires: cygwin
--- geos-2.0.1/CYGWIN-PATCHES/geos.hint.orig	1970-01-01 02:00:00.000000000 +0200
+++ geos-2.0.1/CYGWIN-PATCHES/geos.hint	2004-10-11 15:05:09.000000000 +0200
@@ -0,0 +1,8 @@
+sdesc: "GEOS shared library"
+ldesc: "The GEOS library (Geometry Engine - Open Source) 
+is a C++ port of the Java Topology Suite (JTS).
+This includes all the OpenGIS =Simple Features for SQL= spatial
+predicate functions and spatial operators, as well as specific JTS
+topology functions such as IsValid()"
+category: Science
+requires: cygwin
--- geos-2.0.1/c-compiler.m4.orig	2004-10-12 02:28:42.463202000 +0200
+++ geos-2.0.1/c-compiler.m4	2004-02-02 06:07:18.000000000 +0200
@@ -0,0 +1,191 @@
+# Macros to detect C compiler features
+# $PostgreSQL: pgsql-server/config/c-compiler.m4,v 1.12 2004/02/02 04:07:18 tgl Exp $
+
+
+# PGAC_C_SIGNED
+# -------------
+# Check if the C compiler understands signed types.
+AC_DEFUN([PGAC_C_SIGNED],
+[AC_CACHE_CHECK(for signed types, pgac_cv_c_signed,
+[AC_TRY_COMPILE([],
+[signed char c; signed short s; signed int i;],
+[pgac_cv_c_signed=yes],
+[pgac_cv_c_signed=no])])
+if test x"$pgac_cv_c_signed" = xno ; then
+  AC_DEFINE(signed,, [Define to empty if the C compiler does not understand signed types.])
+fi])# PGAC_C_SIGNED
+
+
+
+# PGAC_TYPE_64BIT_INT(TYPE)
+# -------------------------
+# Check if TYPE is a working 64 bit integer type. Set HAVE_TYPE_64 to
+# yes or no respectively, and define HAVE_TYPE_64 if yes.
+AC_DEFUN([PGAC_TYPE_64BIT_INT],
+[define([Ac_define], [translit([have_$1_64], [a-z *], [A-Z_P])])dnl
+define([Ac_cachevar], [translit([pgac_cv_type_$1_64], [ *], [_p])])dnl
+AC_CACHE_CHECK([whether $1 is 64 bits], [Ac_cachevar],
+[AC_TRY_RUN(
+[typedef $1 int64;
+
+/*
+ * These are globals to discourage the compiler from folding all the
+ * arithmetic tests down to compile-time constants.
+ */
+int64 a = 20000001;
+int64 b = 40000005;
+
+int does_int64_work()
+{
+  int64 c,d;
+
+  if (sizeof(int64) != 8)
+    return 0;			/* definitely not the right size */
+
+  /* Do perfunctory checks to see if 64-bit arithmetic seems to work */
+  c = a * b;
+  d = (c + b) / b;
+  if (d != a+1)
+    return 0;
+  return 1;
+}
+main() {
+  exit(! does_int64_work());
+}],
+[Ac_cachevar=yes],
+[Ac_cachevar=no],
+[# If cross-compiling, check the size reported by the compiler and
+# trust that the arithmetic works.
+AC_COMPILE_IFELSE([AC_LANG_BOOL_COMPILE_TRY([], [sizeof($1) == 8])],
+                  Ac_cachevar=yes,
+                  Ac_cachevar=no)])])
+
+Ac_define=$Ac_cachevar
+if test x"$Ac_cachevar" = xyes ; then
+  AC_DEFINE(Ac_define,, [Define to 1 if `]$1[' works and is 64 bits.])
+fi
+undefine([Ac_define])dnl
+undefine([Ac_cachevar])dnl
+])# PGAC_TYPE_64BIT_INT
+
+
+
+# PGAC_CHECK_ALIGNOF(TYPE, [INCLUDES = DEFAULT-INCLUDES])
+# -----------------------------------------------------
+# Find the alignment requirement of the given type. Define the result
+# as ALIGNOF_TYPE.  This macro works even when cross compiling.
+# (Modelled after AC_CHECK_SIZEOF.)
+
+AC_DEFUN([PGAC_CHECK_ALIGNOF],
+[AS_LITERAL_IF([$1], [],
+               [AC_FATAL([$0: requires literal arguments])])dnl
+AC_CHECK_TYPE([$1], [], [], [$2])
+AC_CACHE_CHECK([alignment of $1], [AS_TR_SH([pgac_cv_alignof_$1])],
+[if test "$AS_TR_SH([ac_cv_type_$1])" = yes; then
+  _AC_COMPUTE_INT([((char*) & pgac_struct.field) - ((char*) & pgac_struct)],
+                  [AS_TR_SH([pgac_cv_alignof_$1])],
+                  [AC_INCLUDES_DEFAULT([$2])
+struct { char filler; $1 field; } pgac_struct;],
+                  [AC_MSG_ERROR([cannot compute alignment of $1, 77])])
+else
+  AS_TR_SH([pgac_cv_alignof_$1])=0
+fi])dnl
+AC_DEFINE_UNQUOTED(AS_TR_CPP(alignof_$1),
+                   [$AS_TR_SH([pgac_cv_alignof_$1])],
+                   [The alignment requirement of a `$1'.])
+])# PGAC_CHECK_ALIGNOF
+
+
+# PGAC_C_FUNCNAME_SUPPORT
+# -----------------------
+# Check if the C compiler understands __func__ (C99) or __FUNCTION__ (gcc).
+# Define HAVE_FUNCNAME__FUNC or HAVE_FUNCNAME__FUNCTION accordingly.
+AC_DEFUN([PGAC_C_FUNCNAME_SUPPORT],
+[AC_CACHE_CHECK(for __func__, pgac_cv_funcname_func_support,
+[AC_TRY_COMPILE([#include <stdio.h>],
+[printf("%s\n", __func__);],
+[pgac_cv_funcname_func_support=yes],
+[pgac_cv_funcname_func_support=no])])
+if test x"$pgac_cv_funcname_func_support" = xyes ; then
+AC_DEFINE(HAVE_FUNCNAME__FUNC, 1,
+          [Define to 1 if your compiler understands __func__.])
+else
+AC_CACHE_CHECK(for __FUNCTION__, pgac_cv_funcname_function_support,
+[AC_TRY_COMPILE([#include <stdio.h>],
+[printf("%s\n", __FUNCTION__);],
+[pgac_cv_funcname_function_support=yes],
+[pgac_cv_funcname_function_support=no])])
+if test x"$pgac_cv_funcname_function_support" = xyes ; then
+AC_DEFINE(HAVE_FUNCNAME__FUNCTION, 1,
+          [Define to 1 if your compiler understands __FUNCTION__.])
+fi
+fi])# PGAC_C_FUNCNAME_SUPPORT
+
+
+# PGAC_PROG_CC_NO_STRICT_ALIASING
+# -------------------------------
+# Find out how to turn off strict aliasing in the C compiler.
+AC_DEFUN([PGAC_PROG_CC_NO_STRICT_ALIASING],
+[AC_CACHE_CHECK([how to turn off strict aliasing in $CC],
+                pgac_cv_prog_cc_no_strict_aliasing,
+[pgac_save_CFLAGS=$CFLAGS
+if test "$GCC" = yes; then
+  pgac_try="-fno-strict-aliasing"
+else
+  # Maybe fill in later...
+  pgac_try=
+fi
+
+for pgac_flag in $pgac_try; do
+  CFLAGS="$pgac_save_CFLAGS $pgac_flag"
+  _AC_COMPILE_IFELSE([AC_LANG_PROGRAM()],
+                     [pgac_cv_prog_cc_no_strict_aliasing=$pgac_try
+break])
+done
+
+CFLAGS=$pgac_save_CFLAGS
+])
+
+if test x"$pgac_cv_prog_cc_no_strict_aliasing" != x""; then
+  CFLAGS="$CFLAGS $pgac_cv_prog_cc_no_strict_aliasing"
+fi])# PGAC_PROG_CC_NO_STRICT_ALIASING
+
+
+# The below backpatches the following Autoconf change:
+#
+# 2002-03-28  Kevin Ryde  <user42@zip.com.au>
+#
+#         * lib/autoconf/c.m4 (AC_C_INLINE): Test with a typedef return value,
+#         to avoid versions of HP C which don't allow that.
+#
+# When we upgrade to Autoconf >= 2.53a then we can drop this and rely
+# on the standard macro.
+
+# AC_C_INLINE
+# -----------
+# Do nothing if the compiler accepts the inline keyword.
+# Otherwise define inline to __inline__ or __inline if one of those work,
+# otherwise define inline to be empty.
+AC_DEFUN([AC_C_INLINE],
+[AC_REQUIRE([AC_PROG_CC_STDC])dnl
+AC_CACHE_CHECK([for inline], ac_cv_c_inline,
+[ac_cv_c_inline=no
+for ac_kw in inline __inline__ __inline; do
+  AC_COMPILE_IFELSE([AC_LANG_SOURCE(
+[#ifndef __cplusplus
+typedef int foo_t;
+static $ac_kw foo_t static_foo () {return 0; }
+$ac_kw int foo () {return 0; }
+#endif
+])],
+                    [ac_cv_c_inline=$ac_kw; break])
+done
+])
+case $ac_cv_c_inline in
+  inline | yes) ;;
+  no) AC_DEFINE(inline,,
+                [Define as `__inline' if that's what the C compiler calls it,
+                 or to nothing if it is not supported.]) ;;
+  *)  AC_DEFINE_UNQUOTED(inline, $ac_cv_c_inline) ;;
+esac
+])# AC_C_INLINE
--- geos-2.0.1/configure.in.orig	2004-09-23 23:28:50.000000000 +0200
+++ geos-2.0.1/configure.in	2004-10-12 02:26:15.886953200 +0200
@@ -36,7 +36,7 @@
 
 dnl types checks ------------------------------------------------------
 
-dnl Find a working 64bit integer
+dnl Find a working 64bit integer postgresql version
 PGAC_TYPE_64BIT_INT([long int])
 if test x"$HAVE_LONG_INT_64" = x"no" ; then
   PGAC_TYPE_64BIT_INT([long long int])
--- geos-2.0.1/source/geom/Makefile.am.orig	2004-07-16 18:20:23.000000000 +0200
+++ geos-2.0.1/source/geom/Makefile.am	2004-10-08 05:05:51.000000000 +0200
@@ -197,7 +197,7 @@
 
 libgeos_la_SOURCES = $(DIR_SOURCES) $(EXTERNAL_SOURCES)
 
-libgeos_la_LDFLAGS = -version-info @INTERFACE_CURRENT@:@INTERFACE_REVISION@:@INTERFACE_AGE@
+libgeos_la_LDFLAGS = -no-undefined -version-info @INTERFACE_CURRENT@:@INTERFACE_REVISION@:@INTERFACE_AGE@
 
 dist-local:
 	cp -p $(DIR_SOURCES) Makefile.am Makefile.in $(distdir)
