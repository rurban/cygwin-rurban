--- origsrc/parrot-0.9.0/README_cygwin.pod	2009-01-20 00:12:16.000000000 +0100
+++ src/parrot-0.9.0/README_cygwin.pod	2009-01-22 13:23:24.671875000 +0100
@@ -12,10 +12,12 @@
 There are official cygwin parrot packages available via
 L<http://cygwin.com/setup.exe>.
 
-  parrot libparrot0 libparrot-devel parrot-perl6 parrot-languages
+  parrot libparrot0 libparrot-devel parrot-perl6
 
 Some tweaks are needed for different names for the ffi to some dll's.
-See L</loadlib DLL versioning>
+See L</loadlib DLL versioning>.
+
+parrot-languages was dropped with 0.9.0.
 
 
 =head1 Packages
@@ -46,13 +48,11 @@
 
 Optional perl packages for testing: 
 
-  L<Test::TAP::HTMLMatrix> if you want to run the language smoke tests
-  with C<make languages-smoke>.
+  L<Test::TAP::HTMLMatrix> if you want to run the smoke tests
+  with C<make smoke>.
 
   L<Test::Base> for some APL language tests.
 
-  perl L<Moose> for smartlink
-
   perl L<Test::Perl::Critic> and L<Perl::Critic>
 
 =over 4
@@ -108,24 +108,60 @@
   make test # see PLATFORMS for known issues.
   make reallyinstall
 
-=head1 TODO
+=head1 PROBLEMS
 
 =over
 
-=item Makefile tuning
+=item perl fatal error - unable to remap Glob.dll
+
+Something like:
+  F<perl.exe>: *** fatal error - unable to remap 
+  F<C:\cygwin\lib\perl5\5.10\i686-cygwin\auto\File\Glob\Glob.dll>
+  to same address as parent(C<0x860000>) != C<0x14D0000>
+
+This is a known cygwin problem with dll's, esp. perl on non-XP 32bit platforms.
+You need to install the C<rebase> package and run C<rebaseall> from an C<ash>
+shell.
+
+=item Crash at miniparrot.exe config_lib.pasm
+
+Invoking Parrot to generate runtime/parrot/include/config.fpmc --cross your
+fingers
+
+  F<./miniparrot.exe config_lib.pasm > runtime/parrot/include/config.fpmc>
+crashes
+
+See below.
+
+=item Spurious stackdumps while building
 
-Rename libparrot.dll to cygparrot0_8_2.dll and create an interim
-libparrot.dll.a
+Building with an already installed library fails. See RT#39742
 
-  [perl #56998] [TODO]  rename cygwin dll to cygparrot$MAJOR_$MINOR_$PATCH.dll
-  [perl #56562] [PATCH] root.in: add cygwin importlib
+Be sure that there's no other libparrot.dll.a or libparrot.a 
+in the linker libpath. 
+
+F</usr/lib/libparrot.dll.a>, F</usr/local/lib/libparrot.dll.a>
+
+=item os hardlink test fail
+
+  t/pmc/os....................................
+  #   Failed test 'hard link was really created'
+  #   at t/pmc/os.t line 312.
+
+This is a known Windows limitation with NTFS junctions on files.
+
+=back
+
+=head1 TODO
+
+=over
 
 =item loadlib DLL versioning
 
 Use cyg*-1.1.dll naming conventions instead of lib*.so.1.1 names for
 loadlib, the FFI.
 
-Thanks to the L<Windows DLL Hell> and the impossibility of
+Thanks to the C<Windows DLL Hell> and the impossibility of
 file hardlinks, windows dll names are versioned, so the loadlib
 function or the various pir's needs more logic.
 
@@ -154,6 +190,6 @@
 
 =head1 HISTORY
 
-Last updated: 20 July 2008
+Last updated: 22 January 2009
 
 =cut
--- origsrc/parrot-0.9.0/config/gen/config_pm/config_lib.in	2008-02-27 05:34:52.000000000 +0100
+++ src/parrot-0.9.0/config/gen/config_pm/config_lib.in	2009-01-22 17:45:40.796875000 +0100
@@ -12,6 +12,7 @@
 
 	<<PCONFIG>>
 
+	set P0["installed"], I11
 	if I11, is_install
 	set S1, "<<PWD>>"
 	set P0["prefix"], S1
--- origsrc/parrot-0.9.0/config/gen/makefiles/root.in	2009-01-21 02:07:28.000000000 +0100
+++ src/parrot-0.9.0/config/gen/makefiles/root.in	2009-01-23 09:48:50.625000000 +0100
@@ -754,7 +754,6 @@
 	$(PARROT) -o $@ runtime/parrot/library/parrotlib.pir
 
 runtime/parrot/include/config.fpmc : myconfig config_lib.pasm $(MINIPARROT)
-	@cygchkdll@
 	@echo Invoking Parrot to generate runtime/parrot/include/config.fpmc --cross your fingers
 	$(MINIPARROT) config_lib.pasm > $@
 
@@ -797,8 +796,8 @@
     lib/Parrot/OpLib/core.pm $(SRC_DIR)/install_config$(O) \
     $(PARROT)
 	$(LINK) @ld_out@$@ \
-    $(SRC_DIR)/main$(O) \
-    @rpath_lib@ $(ALL_PARROT_LIBS) $(LINKFLAGS) $(SRC_DIR)/install_config$(O)
+    $(SRC_DIR)/main$(O) $(SRC_DIR)/install_config$(O) \
+    @rpath_lib@ $(ALL_PARROT_LIBS) $(LINKFLAGS)
 #IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
 
 $(INC_DIR)/parrot.h : $(INC_DIR)/pbcversion.h $(INC_DIR)/vtable.h
--- origsrc/parrot-0.9.0/src/library.c	2009-01-20 09:22:56.000000000 +0100
+++ src/parrot-0.9.0/src/library.c	2009-01-23 10:15:23.843750000 +0100
@@ -1,16 +1,18 @@
 /*
-Copyright (C) 2004-2007, The Perl Foundation.
-$Id: /mirror/trunk/src/library.c 35820 2009-01-20T06:51:44.850729Z infinoid  $
+Copyright (C) 2004-2009, The Perl Foundation.
+$Id: library.c 34944 2009-01-04 22:42:28Z rurban $
 
 =head1 NAME
 
-src/library.c - Interface to Parrot's bytecode library
+src/library.c - Search parrot files in the libpaths
 
 =head1 DESCRIPTION
 
-This file contains C functions to access Parrot's bytecode library functions,
-for include files (via C<.include>), library files (via C<load_bytecode>), and
-dynext files (via C<loadlib>).
+This file contains C functions to find include (via C<.include>), 
+library (via C<load_bytecode>) or dynext (via C<loadlib>) files.
+
+The libpaths are hardcoded, and different when building from source 
+(F<runtime/parrot>) and when being installed (F<$libdir/parrot>).
 
 =head2 Functions
 
@@ -81,14 +83,15 @@
 
 PARROT_WARN_UNUSED_RESULT
 PARROT_CAN_RETURN_NULL
-static STRING* try_bytecode_extensions(PARROT_INTERP, ARGMOD(STRING* path))
+static STRING* try_bytecode_extensions(PARROT_INTERP, ARGMOD(STRING* path),
+    enum_runtime_ft file_type)
         __attribute__nonnull__(1)
         __attribute__nonnull__(2)
         FUNC_MODIFIES(* path);
 
 PARROT_WARN_UNUSED_RESULT
 PARROT_CAN_RETURN_NULL
-static STRING* try_load_path(PARROT_INTERP, ARGMOD(STRING* path))
+static STRING* try_load_file(PARROT_INTERP, ARGMOD(STRING* path))
         __attribute__nonnull__(1)
         __attribute__nonnull__(2)
         FUNC_MODIFIES(* path);
@@ -160,68 +163,79 @@
     ASSERT_ARGS(parrot_init_library_paths)
     PMC *paths;
     STRING *entry;
+    INTVAL installed = 0;
 
     PMC * const iglobals = interp->iglobals;
-    PMC * const config_hash =
-            VTABLE_get_pmc_keyed_int(interp, iglobals, (INTVAL) IGLOBALS_CONFIG_HASH);
-
     /* create the lib_paths array */
     PMC * const lib_paths = pmc_new(interp, enum_class_FixedPMCArray);
+    PMC * const config_hash = VTABLE_get_pmc_keyed_int(interp, iglobals, IGLOBALS_CONFIG_HASH);
+    STRING * const key = CONST_STRING(interp, "installed");
+
     VTABLE_set_integer_native(interp, lib_paths, PARROT_LIB_PATH_SIZE);
     VTABLE_set_pmc_keyed_int(interp, iglobals,
             IGLOBALS_LIB_PATHS, lib_paths);
+    if (VTABLE_elements(interp, config_hash) &&
+        VTABLE_exists_keyed_str(interp, config_hash, key)) {
+        installed = VTABLE_get_integer_keyed_str(interp, config_hash, key);
+    }
 
     /* each is an array of strings */
     /* define include paths */
     paths = pmc_new(interp, enum_class_ResizableStringArray);
     VTABLE_set_pmc_keyed_int(interp, lib_paths,
             PARROT_LIB_PATH_INCLUDE, paths);
-    entry = CONST_STRING(interp, "runtime/parrot/include/");
-    VTABLE_push_string(interp, paths, entry);
-    entry = CONST_STRING(interp, "runtime/parrot/");
-    VTABLE_push_string(interp, paths, entry);
-    entry = CONST_STRING(interp, "./");
-    VTABLE_push_string(interp, paths, entry);
-    if (VTABLE_elements(interp, config_hash)) {
-        STRING * const key = CONST_STRING(interp, "includedir");
-        entry = VTABLE_get_string_keyed_str(interp, config_hash, key);
+    if (installed) {
+        entry = CONST_STRING(interp, "lib/parrot/include/");
+        VTABLE_push_string(interp, paths, entry);
+        entry = CONST_STRING(interp, "lib/parrot/");
         VTABLE_push_string(interp, paths, entry);
     }
-    entry = CONST_STRING(interp, "lib/parrot/include/");
-    VTABLE_push_string(interp, paths, entry);
-    entry = CONST_STRING(interp, "lib/parrot/");
+    else {
+        entry = CONST_STRING(interp, "runtime/parrot/include/");
+        VTABLE_push_string(interp, paths, entry);
+        entry = CONST_STRING(interp, "runtime/parrot/");
+        VTABLE_push_string(interp, paths, entry);
+        entry = CONST_STRING(interp, "./");  /* requires the build_dir */
+        VTABLE_push_string(interp, paths, entry);
+    }
+    entry = CONST_STRING(interp, ""); /* do not add the prefix here */
     VTABLE_push_string(interp, paths, entry);
 
     /* define library paths */
     paths = pmc_new(interp, enum_class_ResizableStringArray);
     VTABLE_set_pmc_keyed_int(interp, lib_paths,
             PARROT_LIB_PATH_LIBRARY, paths);
-    entry = CONST_STRING(interp, "runtime/parrot/library/");
-    VTABLE_push_string(interp, paths, entry);
-    entry = CONST_STRING(interp, "runtime/parrot/");
-    VTABLE_push_string(interp, paths, entry);
-    entry = CONST_STRING(interp, "./");
-    VTABLE_push_string(interp, paths, entry);
-    if (VTABLE_elements(interp, config_hash)) {
-        STRING * const key = CONST_STRING(interp, "libdir");
-        entry = VTABLE_get_string_keyed_str(interp, config_hash, key);
+    if (installed) {
+        entry = CONST_STRING(interp, "lib/parrot/library/");
         VTABLE_push_string(interp, paths, entry);
+        entry = CONST_STRING(interp, "lib/parrot/");
+           VTABLE_push_string(interp, paths, entry);
     }
-    entry = CONST_STRING(interp, "lib/parrot/library/");
-    VTABLE_push_string(interp, paths, entry);
-    entry = CONST_STRING(interp, "lib/parrot/");
+    else {
+        entry = CONST_STRING(interp, "runtime/parrot/library/");
+        VTABLE_push_string(interp, paths, entry);
+        entry = CONST_STRING(interp, "runtime/parrot/"); 
+          VTABLE_push_string(interp, paths, entry);
+        entry = CONST_STRING(interp, "./");  /* with the build_dir */
+        VTABLE_push_string(interp, paths, entry);
+    }
+    entry = CONST_STRING(interp, ""); /* do not add the prefix here */
     VTABLE_push_string(interp, paths, entry);
 
     /* define dynext paths */
     paths = pmc_new(interp, enum_class_ResizableStringArray);
     VTABLE_set_pmc_keyed_int(interp, lib_paths,
             PARROT_LIB_PATH_DYNEXT, paths);
-    entry = CONST_STRING(interp, "runtime/parrot/dynext/");
-    VTABLE_push_string(interp, paths, entry);
+    if (installed) {
+        entry = CONST_STRING(interp, "lib/parrot/dynext/");
+        VTABLE_push_string(interp, paths, entry);
+    }
+    else {
+        entry = CONST_STRING(interp, "runtime/parrot/dynext/");
+        VTABLE_push_string(interp, paths, entry);
+    }
     entry = CONST_STRING(interp, "");
     VTABLE_push_string(interp, paths, entry);
-    entry = CONST_STRING(interp, "lib/parrot/dynext/");
-    VTABLE_push_string(interp, paths, entry);
 
     /* shared exts */
     paths = pmc_new(interp, enum_class_ResizableStringArray);
@@ -470,7 +484,7 @@
 
 /*
 
-=item C<static STRING* try_load_path>
+=item C<static STRING* try_load_file>
 
 Attempts to load a file with name C<path>. If the file is successfully located,
 the finalized name of the file is returned as a STRING. Otherwise, returns
@@ -483,7 +497,7 @@
 PARROT_WARN_UNUSED_RESULT
 PARROT_CAN_RETURN_NULL
 static STRING*
-try_load_path(PARROT_INTERP, ARGMOD(STRING* path))
+try_load_file(PARROT_INTERP, ARGMOD(STRING* path))
 {
     ASSERT_ARGS(try_load_path)
     STRING *final;
@@ -492,9 +506,10 @@
 
     final = path_finalize(interp, final);
 
-    if (Parrot_stat_info_intval(interp, final, STAT_EXISTS)) {
+    /* only files */
+    if (Parrot_stat_info_intval(interp, final, STAT_EXISTS)
+        && !Parrot_stat_info_intval(interp, final, STAT_ISDIR))
         return final;
-    }
 
     return NULL;
 }
@@ -514,7 +529,7 @@
 PARROT_WARN_UNUSED_RESULT
 PARROT_CAN_RETURN_NULL
 static STRING*
-try_bytecode_extensions(PARROT_INTERP, ARGMOD(STRING* path))
+try_bytecode_extensions(PARROT_INTERP, ARGMOD(STRING* path), enum_runtime_ft file_type)
 {
     ASSERT_ARGS(try_bytecode_extensions)
     STRING *with_ext, *result;
@@ -524,30 +539,53 @@
     /*
       First try the path without guessing the extension to ensure compatibility
       with existing code.
+      But if that finds a directory skip it.
+      e.g. load_bytecode "Test/Builder" => .pbc or .pir, but not the dir
      */
 
     with_ext = string_copy(interp, path);
 
-    result = try_load_path(interp, with_ext);
+    result = try_load_file(interp, with_ext);
     if (result)
         return result;
 
     /*
+      Check if the file already contains one of the 3 known extensions.
+      If so fail. A file test.pir.pbc will not be found on "test.pir"
+    */
+    for (guess = 0 ; guess <= LOAD_EXT_CODE_LAST ; guess++) {
+        STRING *d;
+        int len_ext = strlen(load_ext_code[guess]);
+        int len_str = with_ext->strlen;
+        if (len_str <= len_ext) continue;
+        if (!string_equal(interp, string_substr(interp, with_ext, -len_ext,
+                                                len_ext, NULL, 0),
+                          const_string(interp, load_ext_code[guess]))) {
+            return NULL;
+        }
+    }
+
+    /*
       Start guessing now. This version tries to find the lowest form of the
       code, starting with bytecode and working up to PIR. Note the atypical
       loop control. This is so the array can easily be processed in reverse.
      */
 
-    for (guess = 0 ; guess <= LOAD_EXT_CODE_LAST ; guess++) {
+    guess = file_type & PARROT_RUNTIME_FT_PBC ? 0 : 1;
+    for (; guess <= LOAD_EXT_CODE_LAST ; guess++) {
         with_ext = string_copy(interp, path);
         with_ext = string_append(interp,
                                  with_ext, const_string(interp, load_ext_code[guess]));
 
-        result = try_load_path(interp, with_ext);
+        result = try_load_file(interp, with_ext);
         if (result)
             return result;
     }
 
+    if (Parrot_stat_info_intval(interp, path, STAT_EXISTS)
+        && Parrot_stat_info_intval(interp, path, STAT_ISDIR))
+        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_SUBSTR_OUT_OF_STRING,
+                                    "'%s' is a directory", path->strstart);
     return NULL;
 }
 
@@ -631,17 +669,22 @@
     for (i = 0; i < n; ++i) {
         STRING * const path = VTABLE_get_string_keyed_int(interp, paths, i);
 
-        if (string_length(interp, prefix) && !is_abs_path(path))
+        if (string_length(interp, prefix)
+            && string_length(interp, path) /* empty libpath uses no prefix */
+            && !is_abs_path(path))
             full_name = path_concat(interp, prefix, path);
         else
             full_name = string_copy(interp, path);
 
-        full_name = path_append(interp, full_name, file);
+        if (string_length(interp, path))
+            full_name = path_append(interp, full_name, file);
+        else
+            full_name = string_copy(interp, file);
 
         full_name =
             (type & PARROT_RUNTIME_FT_DYNEXT)
-                ? try_load_path(interp, full_name)
-                : try_bytecode_extensions(interp, full_name);
+                ? try_load_file(interp, full_name)
+                : try_bytecode_extensions(interp, full_name, type);
 
         if (full_name)
             return full_name;
@@ -649,8 +692,8 @@
 
     full_name =
         (type & PARROT_RUNTIME_FT_DYNEXT)
-            ? try_load_path(interp, file)
-            : try_bytecode_extensions(interp, file);
+            ? try_load_file(interp, file)
+            : try_bytecode_extensions(interp, file, type);
 
     return full_name;
 }
--- origsrc/parrot-0.9.0/t/pmc/os.t	2009-01-20 00:12:23.000000000 +0100
+++ src/parrot-0.9.0/t/pmc/os.t	2009-01-22 16:04:10.062500000 +0100
@@ -1,12 +1,12 @@
 #! perl
 # Copyright (C) 2001-2008, The Perl Foundation.
-# $Id: /mirror/trunk/t/pmc/os.t 35426 2009-01-11T07:41:31.194637Z cotto  $
+# $Id: os.t 35395 2009-01-11 07:41:31Z cotto $
 
 use strict;
 use warnings;
 use lib qw( . lib ../lib ../../lib );
 use Test::More;
-use Parrot::Test tests => 15;
+use Parrot::Test tests => 17;
 use Parrot::Config;
 use Cwd;
 use File::Spec;
@@ -288,9 +288,9 @@
     unlink "xpto" if -f "xpto";
 }
 
-# Test link
+# Test link to file. May require root permissions
 SKIP: {
-    skip "Parrot link not implemented for Windows, yet", 2 if $MSWin32;
+    skip "Hardlinks to files not possible on Windows", 2 if $MSWin32 or $cygwin;
 
     pir_output_is( <<'CODE', <<"OUT", "Test link" );
 .sub main :main
@@ -309,10 +309,35 @@
 OUT
 
     my $nl = [ stat("MANIFEST") ]->[3];
-    ok( $nl > 1, "hard link was really created" );
+    ok( $nl > 1, "hard link to file was really created" );
     unlink "xpto" if -f "xpto";
 }
 
+# Test link to dir.
+TODO: {
+    local $TODO = "Hardlinks to a directory may require root permissions";
+
+    pir_output_is( <<'CODE', <<"OUT", "Test dirlink" );
+.sub main :main
+        $P1 = new ['OS']
+
+        $S1 = "xpto"
+        $S2 = "tools"
+        $P1."link"($S2, $S1)
+
+        print "ok\n"
+
+        end
+.end
+CODE
+ok
+OUT
+
+    my $nl = [ stat("tools") ]->[3];
+    ok( $nl > 1, "hard link to dir was really created" );
+    unlink "xpto" if -d "xpto";
+}
+
 # Local Variables:
 #   mode: cperl
 #   cperl-indent-level: 4
--- origsrc/parrot-0.9.0/tools/dev/install_files.pl	2009-01-20 05:18:39.000000000 +0100
+++ src/parrot-0.9.0/tools/dev/install_files.pl	2009-01-23 14:03:16.078125000 +0100
@@ -124,8 +124,8 @@
     destdir     => '',
     exec_prefix => '/usr',
     bindir      => '/usr/bin',
-    libdir      => '/usr/lib/parrot',
-    includedir  => '/usr/include/parrot',
+    libdir      => '/usr/lib',
+    includedir  => '/usr/include',
     docdir      => '/usr/share/doc/parrot',
     'dry-run'   => 0,
 );
@@ -189,6 +189,7 @@
     }
     elsif ( $meta{include} ) {
         $dest =~ s/^include//;
+        $dest =~ s/^src/parrot/;
         $dest = File::Spec->catdir( $options{includedir}, $dest );
     }
     elsif ( $meta{doc} ) {
@@ -202,11 +203,22 @@
         # --pkgconfigdir option.
         $dest = File::Spec->catdir( $options{libdir}, 'pkgconfig', $dest );
     }
-    elsif ( /\[library]/ ) {
-        $dest =~ s/^runtime/$options{libdir}/;
-    }
     else {
-        $dest = File::Spec->catdir( $options{prefix}, $dest );
+        next if $dest =~ /^compilers|config|tools/;
+        if (/^runtime/) {
+            $dest =~ s/^runtime/$options{libdir}/;
+        }
+        elsif (/^languages/) {
+            $dest =~ s/^languages//;
+	    $dest = File::Spec->catdir( $options{libdir}, 'parrot', 'languages', $dest );
+        }
+        elsif (/^src/) {
+	    $dest =~ s|^src/||;
+            $dest = File::Spec->catdir( $options{libdir}, 'parrot', 'src', $dest );
+        }
+	else {
+            $dest = File::Spec->catdir( $options{prefix}, $dest );
+        }
     }
 
     $dest = File::Spec->catdir( $options{buildprefix}, $dest )
@@ -245,6 +257,7 @@
     }
     else {
         next unless -e $src;
+        next if $^O eq 'cygwin' and -e "$src.exe"; # cygwin stat works, but copy not
         copy( $src, $dest ) or die "copy $src to $dest: $!\n";
         print "$dest\n";
     }
