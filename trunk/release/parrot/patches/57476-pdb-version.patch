Index: parrot-svn/src/parrot_debugger.c
===================================================================
--- parrot-svn.orig/src/parrot_debugger.c
+++ parrot-svn/src/parrot_debugger.c
@@ -1,6 +1,6 @@
 /*
 Copyright (C) 2001-2008, The Perl Foundation.
-$Id: parrot_debugger.c 29530 2008-07-16 21:37:31Z julianalbo $
+$Id: parrot_debugger.c 30206 2008-08-13 10:07:51Z julianalbo $
 
 History:
     Renamed from pdb.c in 2008.7.15
@@ -112,6 +112,7 @@ and C<debug_break> ops in F<ops/debug.op
 #include "../compilers/imcc/imc.h"
 #include "../compilers/imcc/parser.h"
 #include "parrot/embed.h"
+#include "parrot/debugger.h"
 
 static void PDB_printwelcome(void);
 static void PDB_run_code(Parrot_Interp interp, int argc, char *argv[]);
@@ -131,19 +132,25 @@ int
 main(int argc, char *argv[])
 {
     Parrot_Interp     interp   = Parrot_new(NULL);
+
+    /*
     Parrot_Interp     debugger = Parrot_new(interp);
     PDB_t            *pdb      = mem_allocate_zeroed_typed(PDB_t);
+    */
+    PDB_t *pdb;
     const char       *filename;
     char             *ext;
     void             *yyscanner;
 
+    Parrot_debugger_init(interp);
+
+    pdb = interp->pdb;
+
     /*Parrot_set_config_hash();  TODO link with cfg */
 
     /* attach pdb structure */
-    debugger->pdb    = pdb;
-    interp->pdb      = pdb;
-    interp->debugger = debugger;
-    pdb->debugee     = interp;
+    interp->debugger = pdb->debugger;
+    pdb->state       = PDB_ENTER;
 
     Parrot_block_GC_mark(interp);
     Parrot_block_GC_sweep(interp);
@@ -176,7 +183,7 @@ main(int argc, char *argv[])
         IMCC_INFO(interp)->state->file = filename;
 
         if (!(imc_yyin_set(fopen(filename, "r"), yyscanner)))    {
-            IMCC_fatal_standalone(interp, E_IOError,
+            IMCC_fatal_standalone(interp, EXCEPTION_PIO_ERROR,
                     "Error reading source file %s.\n",
                     filename);
         }
@@ -200,6 +207,7 @@ main(int argc, char *argv[])
 
     PDB_printwelcome();
 
+    interp->run_core = PARROT_DEBUGGER_CORE;
     PDB_run_code(interp, argc - 1, argv + 1);
 
 
@@ -217,18 +225,15 @@ Adds a default exception handler to PDB.
 static void
 PDB_run_code(Parrot_Interp interp, int argc, char *argv[])
 {
-    Parrot_exception exp;
-
-    if (setjmp(exp.destination)) {
-        char *msg = string_to_cstring(interp, interp->exceptions->msg);
-        fprintf(stderr, "Caught exception: %s\n", msg);
-        string_cstring_free(msg);
+    new_runloop_jump_point(interp);
+    if (setjmp(interp->current_runloop->resume)) {
+        free_runloop_jump_point(interp);
+        fprintf(stderr, "Caught exception\n");
         return;
     }
 
-    push_new_c_exception_handler(interp, &exp);
-
     Parrot_runcode(interp, argc - 1, argv + 1);
+    free_runloop_jump_point(interp);
 }
 
 /*
@@ -244,9 +249,9 @@ Prints out the welcome string.
 static void
 PDB_printwelcome(void)
 {
-    fprintf(stderr, "Parrot Debugger " PARROT_VERSION "\n");
-    fprintf(stderr, "\nPlease note: ");
-    fprintf(stderr, "the debugger is currently under reconstruction\n");
+    fprintf(stderr,
+        "Parrot " PARROT_VERSION " Debugger\n"
+        "\nPlease note: the debugger is currently under reconstruction\n");
 }
 
 /*
