difforig perl-current/lib/File/Spec.pm perl-current/lib/File/Spec/Win32.pm perl-current/lib/File/Spec/Cygwin.pm perl-current/lib/File/Spec/Unix.pm

diff -u perl-current/lib/File/Spec.pm.orig perl-current/lib/File/Spec.pm
--- perl-current/lib/File/Spec.pm.orig	2008-02-12 16:12:46.000000000 +0100
+++ perl-current/lib/File/Spec.pm	2008-06-06 15:11:53.687500000 +0200
@@ -3,7 +3,7 @@
 use strict;
 use vars qw(@ISA $VERSION);
 
-$VERSION = '3.2701';
+$VERSION = '3.2702';
 $VERSION = eval $VERSION;
 
 my %module = (MacOS   => 'Mac',
@@ -166,8 +166,11 @@
 
 Returns a true or false value indicating, respectively, that alphabetic
 case is not or is significant when comparing file specifications.
+Cygwin and Win32 accept an optional mount point resp. drive ("C:") argument.
+On all other platforms the optional mount point argument is ignored.
+TODO: case-insensitive FAT, NFS, Samba mounts on Unix.
 
-    $is_case_tolerant = File::Spec->case_tolerant();
+    $is_case_tolerant = File::Spec->case_tolerant( $mount_point );
 
 =item file_name_is_absolute
 
diff -u perl-current/lib/File/Spec/Win32.pm.orig perl-current/lib/File/Spec/Win32.pm
--- perl-current/lib/File/Spec/Win32.pm.orig	2008-02-12 16:12:47.000000000 +0100
+++ perl-current/lib/File/Spec/Win32.pm	2008-06-06 15:11:53.718750000 +0200
@@ -5,7 +5,7 @@
 use vars qw(@ISA $VERSION);
 require File::Spec::Unix;
 
-$VERSION = '3.2701';
+$VERSION = '3.2702';
 
 @ISA = qw(File::Spec::Unix);
 
@@ -81,15 +81,23 @@
 
 MSWin32 case-tolerance depends on GetVolumeInformation() $ouFsFlags == FS_CASE_SENSITIVE,
 indicating the case significance when comparing file specifications.
-Since XP FS_CASE_SENSITIVE is effectively disabled for the NT subsubsystem.
+Since XP FS_CASE_SENSITIVE is effectively disabled for the NT subsystem.
 See http://cygwin.com/ml/cygwin/2007-07/msg00891.html
+Accepts an optional drive-letter argument.
 Default: 1
 
 =cut
 
 sub case_tolerant () {
+  use Win32;
+  my @ver = Win32::GetOSVersion();
+  # From XP on this is disabled.
+  if ($ver[4] >= 2 and $ver[1] >= 5 and $ver[2] >= 1) { return 1; }
+  if ($ver[4] < 2) { return 1; } # Win32s,95,ME are always case_tolerant.
   eval { require Win32API::File; } or return 1;
-  my $drive = shift || "C:";
+  my $drive = shift;
+  $drive = shift if $drive =~ /^File::Spec/;
+  $drive ||= $ENV{SYSTEMDRIVE} || substr($ENV{WINDIR}, 0, 2);
   my $osFsType = "\0"x256;
   my $osVolName = "\0"x256;
   my $ouFsFlags = 0;
diff -u perl-current/lib/File/Spec/Cygwin.pm.orig perl-current/lib/File/Spec/Cygwin.pm
--- perl-current/lib/File/Spec/Cygwin.pm.orig	2008-02-12 16:12:46.000000000 +0100
+++ perl-current/lib/File/Spec/Cygwin.pm	2008-06-06 15:11:53.703125000 +0200
@@ -4,7 +4,7 @@
 use vars qw(@ISA $VERSION);
 require File::Spec::Unix;
 
-$VERSION = '3.2701';
+$VERSION = '3.2702';
 
 @ISA = qw(File::Spec::Unix);
 
@@ -105,39 +105,37 @@
 =item case_tolerant
 
 Override Unix. Cygwin case-tolerance depends on managed mount settings and
-as with MsWin32 on GetVolumeInformation() $ouFsFlags == FS_CASE_SENSITIVE,
+as with MSWin32 on GetVolumeInformation() $ouFsFlags == FS_CASE_SENSITIVE,
 indicating the case significance when comparing file specifications.
+Since XP FS_CASE_SENSITIVE is effectively disabled for the NT subsystem.
+See http://cygwin.com/ml/cygwin/2007-07/msg00891.html
+Accepts an optional drive-mount argument.
 Default: 1
 
 =cut
 
+my %tmp_case_tolerant;
 sub case_tolerant () {
   return 1 unless $^O eq 'cygwin'
     and defined &Cygwin::mount_flags;
 
   my $drive = shift;
+  $drive = shift if $drive =~ /^File::Spec/;
+  my $windrive;
   if (! $drive) {
-      my @flags = split(/,/, Cygwin::mount_flags('/cygwin'));
-      my $prefix = pop(@flags);
-      if (! $prefix || $prefix eq 'cygdrive') {
-          $drive = '/cygdrive/c';
-      } elsif ($prefix eq '/') {
-          $drive = '/c';
-      } else {
-          $drive = "$prefix/c";
-      }
+      $windrive = $ENV{SYSTEMDRIVE} || substr($ENV{WINDIR}, 0, 2);
+      $drive = Cygwin::win_to_posix_path($windrive."\\");
   }
+  return $tmp_case_tolerant{$drive} if exists $tmp_case_tolerant{$drive};
   my $mntopts = Cygwin::mount_flags($drive);
   if ($mntopts and ($mntopts =~ /,managed/)) {
+    $tmp_case_tolerant{$drive} = 0;
     return 0;
   }
-  eval { require Win32API::File; } or return 1;
-  my $osFsType = "\0"x256;
-  my $osVolName = "\0"x256;
-  my $ouFsFlags = 0;
-  Win32API::File::GetVolumeInformation($drive, $osVolName, 256, [], [], $ouFsFlags, $osFsType, 256 );
-  if ($ouFsFlags & Win32API::File::FS_CASE_SENSITIVE()) { return 0; }
-  else { return 1; }
+  require File::Spec::Win32;
+  $windrive = substr(Cygwin::posix_to_win_path($drive),0,2);
+  $tmp_case_tolerant{$drive} = File::Spec::Win32::case_tolerant($windrive);
+  return $tmp_case_tolerant{$drive};
 }
 
 =back
diff -u perl-current/lib/File/Spec/Unix.pm.orig perl-current/lib/File/Spec/Unix.pm
--- perl-current/lib/File/Spec/Unix.pm.orig	2008-02-12 16:12:47.000000000 +0100
+++ perl-current/lib/File/Spec/Unix.pm	2008-06-06 15:11:53.718750000 +0200
@@ -3,7 +3,7 @@
 use strict;
 use vars qw($VERSION);
 
-$VERSION = '3.2701';
+$VERSION = '3.2702';
 
 =head1 NAME
 
@@ -42,7 +42,7 @@
 sub canonpath {
     my ($self,$path) = @_;
     return unless defined $path;
-    
+
     # Handle POSIX-style node names beginning with double slash (qnx, nto)
     # (POSIX says: "a pathname that begins with two successive slashes
     # may be interpreted in an implementation-defined manner, although
@@ -187,6 +187,7 @@
 
 Returns a true or false value indicating, respectively, that alphabetic
 is not or is significant when comparing file specifications.
+Todo: Add mount point argument to support case-tolerant NFS and samba shares.
 
 =cut
 
