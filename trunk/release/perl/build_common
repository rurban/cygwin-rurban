# -*- shell-script -*-
# /usr/src/perl/build_common contains common bash functions 
# for the cygwin perl build scripts. By rurban@cpan.org

## M$ sucks
PATH=/usr/bin:/usr/local/bin:`cygpath $WINDIR`:`cygpath $WINDIR`/System32:~/bin
unset LIB
unset INCLUDE
export CYGWIN=server
if cygrunsrv -Q cygserver >/dev/null 2>&1; then
    if cygrunsrv -Q cygserver|grep Stopped; then
	cygrunsrv -S cygserver
    fi
    if cygrunsrv -Q cygserver|grep Stopped; then
	echo "Warning: cygserver could not be started. Some tests will fail"
    fi
else
    echo "Warning: cygserver is not installed. Some tests will fail"
fi

## cfg
if [ -z "$prefix" ];     then prefix=/usr; fi
if [ -z "$release" ];    then release="-1"; fi
if [ -z "$ver" ]; then 
    ver="5.`perl -ane'print $F[2] if /^#define PERL_VERSION/'`.`perl -ane'print $F[2] if /^#define PERL_SUBVERSION/'`"
fi
if [ -z "$shortver" ];   then shortver=$(echo "${ver}${release}" | sed 's/-.*//'); fi
if [ -z "$longver" ];    then longver="${ver}"; fi
if [ -z "$major" ];      then major=5; fi
if [ -z "$minor" ];      then minor="`echo ${shortver:2:5}|sed 's/\..*//'`"; fi
if [ -z "$subversion" ]; then subversion="`echo ${ver:2:8}|sed 's/^.*\.//'`"; fi
if [ -z "$patch" -a -z "$make_all" -a $pkg_ver = perl-git ]; then
    patch="`cd perl-git; git rev-parse HEAD | cut -b1-8; cd ..`";
fi
if [ -z "$usethreads" ]; then usethreads=yes; fi
if [ -z "$rebasebase" ]; then rebasebase=0x58000000; fi
if [ -z "$srcdir" ];     then srcdir=${dir}/${pkg_ver}; fi
if [ -z "$download_url" ];then download_url="http://www.cpan.org/src/5.0/perl-$ver.tar.gz"; fi
if [ -z "$rsync_url" ];  then rsync_url="rsync://public.activestate.com/perl-current/"; fi
#TODO: detect cygwin-1.5
if [ -z "$docdir" ]; then
  #docdir="${prefix}/share/doc/${pkg}-${ver}"
  docdir="${prefix}/share/doc/${pkg}"
fi
archver="${shortver}"
if [ "$pkg_ver" = "perl-git" ]; then
    archver="${ver}"
fi

debugpath="${prefix}/lib/debug"

CONF_ARGS=${CONF_ARGS:=-de}

## functions
rebase_all() {
    echo "## peflags + rebase"
    echo "./perl.exe" > $dir/rebase.lst
    find -type f -name \*.exe | grep -v "perl.exe" >> $dir/rebase.lst
    peflags -t1 -T $dir/rebase.lst

    find -type f -name \*.dll > $dir/rebase.lst
    peflags -d1 -T $dir/rebase.lst
    cat $dir/rebase.lst | rebase -v -b $rebasebase -T -
    true
}

strip_debug() {
    echo "## seperate debug symbols into extra /usr/lib/debug/path/file.dbg"
    test -z $instdir && exit
    cd $instdir
    find -type f -name \*.exe | cut -b3- > $dir/strip.lst
    find -type f -name \*.dll | cut -b3- >> $dir/strip.lst
    for f in $(cat $dir/strip.lst); do
        d=$(dirname $f)
        s=${f%.*}
        mkdir -p ${instdir}/${debugpath}/$d
        mkdir -p ${debugpath}/$d
        #[ -e ${instdir}/${debugpath}/$s.dbg ] && rm ${instdir}/${debugpath}/$s.dbg
        echo "objcopy --only-keep-debug $f ${instdir}/${debugpath}/$s.dbg"
        objcopy --only-keep-debug $f ${instdir}/${debugpath}/$s.dbg
        if [ -e ${instdir}/${debugpath}/$s.dbg ]; then
            echo "objcopy --strip-debug $f"
            objcopy --strip-debug $f
            if [ -e ${debugpath}/$s.dbg ]; then
                mv ${debugpath}/$s.dbg ${debugpath}/$s.dbg.tmp
                ln -s ${instdir}/${debugpath}/$s.dbg ${debugpath}/$s.dbg
                echo "objcopy --add-gnu-debuglink=${debugpath}/$s.dbg $f"
                objcopy --add-gnu-debuglink=${debugpath}/$s.dbg $f
                mv ${debugpath}/$s.dbg.tmp ${debugpath}/$s.dbg
            else
                # ln against cannot fill debug link section: No such file ...
                ln -s ${instdir}/${debugpath}/$s.dbg ${debugpath}/$s.dbg
                echo "objcopy --add-gnu-debuglink=${debugpath}/$s.dbg $f"
                objcopy --add-gnu-debuglink=${debugpath}/$s.dbg $f
            fi
        else
            echo "error stripping symbols from $f"
        fi
    done
    true
}

__stage() {
    echo -e "\e[1;32m# stage_${1}\e[0;0m";
}
__substage() {
    echo -e "\e[1;39m## stage_${1}\e[0;0m";
}

faclfixdir() {
  d="$1"
  # cygwin facl wrong if default inherited, which will cause some write tests to fail.
  cat > ${dir}/facl.dir <<EOF
# file: .
# owner: $USER
# group: root
user::rwx
group::r-x
mask:rwx
other:r-x
EOF
  echo "faclfixdir $d"
  find "$d" -type d -exec /usr/bin/setfacl -f ${dir}/facl.dir '{}' \;
}

faclmkdir() {
  d="$1"
  echo "mkdir -p $d"
  mkdir -p "$d"
  faclfixdir "$d"
}

stage_cpan() {
  if [ -n "$stage_cpan" ]; then
    stage_cpan_vendorprep
  fi
}

stage_cpan_vendorprep() {
  if [ -n "$stage_vendorprep" -o -n "$stage_cpan" ]; then
    __substage "cpan_vendorprep"
    myperl=perl
    if [ -e "/usr/local/bin/perl${longver}" ]; then
      myperl=perl${longver}
    fi
    for m in $modules; do
      echo $myperl -MCPAN -e"get \"$m\""
      $myperl -MCPAN -e"get \"$m\""
    done
  fi
}

stage_pre_vendorprep() {
  __substage "pre_vendorprep"
  cd $dir
  #$ for p in Test-Reporter-1.38 ; do loc=$(grep "localfile:" ~/.cpan/build/$p-*.yml | cut -d' ' -f4); ln -s $loc; ln -s $loc ../; done 
  for i in $exts; do
    if [ ! -e $i.tar.gz ]; then
      # try to find it below
      if [ -e ../$i.tar.gz ]; then
	echo "ln -s ../$i.tar.gz"
	ln -s ../$i.tar.gz
      else
	# try to find in the cpan archive
	x=`ls ~/.cpan/build/$i-*.yml 2>/dev/nul`
	if [ -n "$x" ]; then
	  echo "preq $i.tar.gz not found. But found $x:"
	  echo `grep -h "localfile: " $x | cut -c14-|head -n1`
	  cp `grep -h "localfile: " $x | cut -c14-|head -n1` .
	else
	  f=`find ~/.cpan/sources/authors/id -name $i.tar.gz`
	  if [ -n "$f" ]; then
	    echo "preq $i.tar.gz not found. But found $f:"
	    cp $f .
	  else
	    echo "preq $i.tar.gz not found"
          fi
	fi
      fi
    fi
  done
}

stage_vendorprep() {
  if [ -n "$stage_vendorprep" ]; then
    __stage "vendorprep"
    stage_pre_vendorprep
    cd $dir
    for i in $exts; do test -e $i.tar.gz || exit; done
  fi
}

stage_post_prep_hook() {
    echo -n ""
}
stage_prep() {
  if [ -n "$stage_prep" ]; then
    __stage "prep"
    stage_pre_prep
    stage_prep_unpack
    stage_prep_patch
    stage_post_prep_hook
  fi
}

stage_pre_prep() {
  if [ -n "$stage_prep" ]; then

    __substage "pre_prep"
    cd ${dir}
    if [ ! -d ${builddir} ]; then 
	faclmkdir ${builddir};
    fi
    if [ ! -d ${instdir} ]; then 
	faclmkdir ${instdir}; 
    fi
    ## checkout builddir
    if [ -e ${builddir}/GNUMakefile -a -z "$make_all" ]; then
	cd ${builddir}
	echo "make clean"
	make clean
	if [ -n "$stage_configure" ]; then
	    echo "rm config.sh config.h Policy.sh"
	    /usr/bin/rm config.sh config.h Policy.sh 2>/dev/null
	    echo "find -name Makefile\* -delete"
	    /usr/bin/find -name Makefile\* -delete
	fi
	cd ${dir}
    else
	# if 
	echo "rm -rf ${builddir}/*"
	/usr/bin/rm -rf ${builddir}/*
	/usr/bin/sleep 1
        faclfixdir "${builddir}"
	# mkdir -p -m 777 ${builddir}
	stage_configure=1
    fi
  fi
}

stage_prep_unpack() {
  if [ -n "$stage_prep" ]; then
    __substage "prep_unpack"
    log=${dir}/log.prep${exesuffix}
    cd ${dir}
    rm ${log} 2>/dev/null
    ## unpack or rsync for blead
    test -e ${srcdir} && echo "difforig ${srcdir} > difforig-`date +%Y-%m-%d-%H%M`.patch"
    test -e ${srcdir} && difforig ${srcdir} > difforig-`date +%Y-%m-%d-%H%M`.patch
    if [ "$pkg_ver" = "perl-current" ]; then
	echo "rsync -acvz --force --delete ${rsync_url} ${pkg_ver}"
	rsync -acvz --force --delete ${rsync_url} ${pkg_ver} \
	    | tee -a ${log}
    else
      if [ "$pkg_ver" = "perl-git" ]; then
	test -e ${pkg_ver} && echo "difforig ${pkg_ver} > difforig-`date +%Y-%m-%d-%H%M`.patch"
	test -e ${pkg_ver} && difforig ${pkg_ver} > difforig-`date +%Y-%m-%d-%H%M`.patch
	echo "cd ${pkg_ver}; git reset --hard; git pull -s ours origin HEAD"
	cd ${pkg_ver}
        git reset --hard  | tee -a ${dir}/log.prep; 
        git pull origin   | tee -a ${dir}/log.prep
        cd ..
      else
	echo "rm -rf ${srcdir}/*"
	rm -rf ${srcdir}/* 2>/dev/null | tee -a ${log}
        faclfixdir "${srcdir}"
	sleep 2
	if [ ! -e ${pkg_ver}.tar.bz2 -a ! -e ${pkg_ver}.tar.gz ]; then
          echo "wget ${download_url}"
          wget ${download_url}
        fi
	if [ -e ${pkg_ver}.tar.bz2 ]; then
	  echo "tar xfj ${pkg_ver}.tar.bz2"
	  tar xfj ${pkg_ver}.tar.bz2 | tee -a ${log}
	else
          if [ -e ${pkg_ver}.tar.gz ]; then
	    echo "tar xfz ${pkg_ver}.tar.gz"
	    tar xfz ${pkg_ver}.tar.gz | tee -a ${log}
          else
            echo "${pkg_ver}.tar.gz or ${pkg_ver}.tar.bz2 not found"
            exit
          fi
        fi
      fi
    fi
  fi
}

__stage_empty() {
  echo -n ""
}

stage_prep_patch() {
  if [ -n "$stage_prep" ]; then
    __substage "prep_patch"
    log=${dir}/log.prep${exesuffix}
    cd ${dir}
    for p in pl-*.patch; do
	(cd ${srcdir}
	__substage "patch $p"
	if patch -N -s --binary --dry-run -p1 -i ../$p &> /dev/null
	then
	    patch -N --binary -b -p1 -i ../$p
	else
	    if patch -N -s --binary --dry-run -p0 -i ../$p &> /dev/null
            then
                patch -N --binary -b -p0 -i ../$p
            else
                patch -N --binary -b -p1 -i ../$p
                echo "patch $p failed"
                exit 1
            fi
        fi
	cd -) | tee -a ${log}
    done
    # patch bug: chmod .orig 0000 => 0444; chmod curr 0444 => 0644
    cd ${srcdir}
    find . -name \*.orig -exec chmod 0444 \{\} \;
    find . -name \*.orig -print | sed 's,.orig,,' | xargs chmod u+rw
    cd ${dir}
  fi
}

stage_configure_policy() {
    __substage "configure_policy"
    if [ "$shortver" = "5.10" ]; then
	echo "otherlibdirs='/usr/lib/perl5/site_perl/5.8:/usr/lib/perl5/vendor_perl/5.8'" >> Policy.sh
    fi
    if [ "$shortver" = "5.11" ]; then
	if [ "$archver" = "$ver" ]; then
	    echo "otherlibdirs='/usr/lib/perl5/site_perl/5.11:/usr/lib/perl5/vendor_perl/5.11:/usr/lib/perl5/site_perl/5.10:/usr/lib/perl5/vendor_perl/5.10:/usr/lib/perl5/site_perl/5.8:/usr/lib/perl5/vendor_perl/5.8'" >> Policy.sh
	else
	    echo "otherlibdirs='/usr/lib/perl5/site_perl/5.10:/usr/lib/perl5/vendor_perl/5.10:/usr/lib/perl5/site_perl/5.8:/usr/lib/perl5/vendor_perl/5.8'" >> Policy.sh
	fi
    fi
    if [ "$shortver" = "5.12" ]; then
	if [ $archver = $ver ]; then
	    echo "otherlibdirs='/usr/lib/perl5/site_perl/5.11:/usr/lib/perl5/vendor_perl/5.11:/usr/lib/perl5/site_perl/5.10:/usr/lib/perl5/vendor_perl/5.10:/usr/lib/perl5/site_perl/5.8:/usr/lib/perl5/vendor_perl/5.8'" >> Policy.sh
	else
	    echo "otherlibdirs='/usr/lib/perl5/site_perl/5.11:/usr/lib/perl5/vendor_perl/5.11:/usr/lib/perl5/site_perl/5.10:/usr/lib/perl5/vendor_perl/5.10:/usr/lib/perl5/site_perl/5.8:/usr/lib/perl5/vendor_perl/5.8'" >> Policy.sh
	fi
    fi
}
stage_post_configure_hook() {
    echo -n ""
}
stage_configure() {
  if [ -n "$stage_configure" ]; then
    __stage "configure"
    if [ -z "$stage_prep" ]; then
	if [ ! -d ${builddir} ]; then 
	    faclmkdir ${builddir};
	fi
    fi
    # check debug, usethreads
    ## configure perl
    cd ${builddir}
    log=${dir}/log.configure${exesuffix}

    echo "cd ${builddir}; rm config.sh config.h Policy.sh *.o *.exe *.dll *.a" |\
	tee ${log}
    rm config.sh config.h Policy.sh *.o *.exe *.dll *.a 2>/dev/null
    rm pod/perldelta.pod
    if [ -d ext ]; then
        echo "find ext -name Makefile -delete" | tee -a ${log}
        find ext -name Makefile -delete
    fi
    if [ -d ext/Time/HiRes ]; then
        make -C ext/Time/HiRes clean || rm ext/Time/HiRes/xdefine ext/Time/HiRes/pm_to_blib
    fi
    echo 'cat > Policy.sh' | tee -a ${log}

    archver="${shortver}"
    if [ "$pkg_ver" = "perl-git" ]; then
	archver="${ver}"
    fi
    cat > ${builddir}/Policy.sh <<EOF
#!/bin/sh
# Auto-generated cygwin Policy file for ${pkg}-${ver}${release}
# ${archname}

# Where things will be.
prefix='${prefix}'
siteprefix='${prefix}'
vendorprefix='${prefix}'
vendorman1dir='${prefix}/share/man/man1'
vendorman3dir='${prefix}/share/man/man3'
html1dir='${docdir}/html/html1'
html3dir='${docdir}/html/html3'
sitehtml1dir='${docdir}/html/html1'
sitehtml3dir='${docdir}/html/html3'
vendorhtml1dir='${docdir}/html/html1'
vendorhtml3dir='${docdir}/html/html3'

archname='${archname}'
privlib='${prefix}/lib/perl5/${archver}'
sitelib='${prefix}/lib/perl5/site_perl/${archver}'
vendorlib='${prefix}/lib/perl5/vendor_perl/${archver}'
archlib='${prefix}/lib/perl5/${archver}/${archname}'
sitearch='${prefix}/lib/perl5/site_perl/${archver}/${archname}'
vendorarch='${prefix}/lib/perl5/vendor_perl/${archver}/${archname}'

sitebin='/usr/local/bin'
sitescript='/usr/local/bin'

# The maintainer.
mydomain='.x-ray.at'
#myhostname='reini'
perladmin='rurban@x-ray.at'
cf_by='rurban'
cf_email='cygwin@cygwin.com'

EOF
    stage_configure_policy
    CONF_ARGS="-de -Dlibperl=$libperl -Dcc=gcc-4 -Dld=g++-4 -Darchname=${archname}"
    if [ -z "$make_all" ]; then
	test -s ../Policy.local && cat ../Policy.local >> Policy.sh
	test -s ../conf_args.local && . ../conf_args.local
    fi
    #echo "inc_version_list='5.8'" >> Policy.sh
    if [ -z "$CONF_no_mksymlinks" ]; then 
	CONF_ARGS="$CONF_ARGS -Dmksymlinks"
    fi
    if [ "$usethreads" = "no" ]; then 
	CONF_ARGS="$CONF_ARGS -Uusethreads"
    else
	CONF_ARGS="$CONF_ARGS -Dusethreads"
    fi
    if [ $minor -gt 9 -a $minor -lt 14 ] ; then
	CONF_ARGS="$CONF_ARGS -Dmad=y"
    fi
    if [ $minor = 13 ] ; then
	CONF_ARGS="$CONF_ARGS -Dusedevel"
    fi
    if [ -z "$make_all" -a -n "$make_debug" ]; then
	CONF_ARGS="$CONF_ARGS -Dusedevel"
	echo "installbin='/usr/local/bin'" >> Policy.sh
	echo "installscript='/usr/local/bin'" >> Policy.sh
    else
        if [ "${pkg_ver}" = "perl-git" ]; then
	    CONF_ARGS="$CONF_ARGS -Dusedevel"
	    echo "installbin='/usr/local/bin'" >> Policy.sh
	    echo "installscript='/usr/local/bin'" >> Policy.sh
        fi
    fi
    if [ -n "$make_debug" ]; then
	CONF_ARGS="$CONF_ARGS -DDEBUGGING -Doptimize=-g3"
    else
        # -g for strip_debug
        # tricky: only -DEBUGGING=-g lets us generate debuginfo without -DDEBUGGING
        # fedora fell into that trap
	if [ -n "$make_all" ]; then
	    CONF_ARGS="$CONF_ARGS -Accflags=-g"
        else
            CONF_ARGS="$CONF_ARGS -Accflags=-g3"
        fi
    fi
    echo "sh ${srcdir}/Configure $CONF_ARGS" |\
	tee -a ${log}
    sh ${srcdir}/Configure $CONF_ARGS 2>&1 |\
	tee -a ${log}

    # cygwin facl still wrong, which will cause some write tests to fail.
    faclfixdir "${builddir}"
    cd ${dir}
    stage_post_configure_hook
  fi
}
stage_post_make_hook() {
    echo -n ""
}
stage_make() {
  if [ -n "$stage_make" ]; then
    __stage "make"
    cd ${builddir}
    ( make -j1 all libperl.a 2>&1 | tee ${dir}/log.make${exesuffix} ) && \
	test -f ${builddir}/perl.exe && \
        rebase_all && \
        find lib -name \*.dll -exec chmod +rx \{\} \; && \
	cd ${dir} && \
	stage_post_make_hook
    test -f ${builddir}/perl.exe || exit
  fi
}
stage_post_check_hook() {
    echo -n ""
}
stage_check() {
  if [ -n "$stage_check" ]; then
    __stage "check"
    cd ${builddir}
    test -f perl.exe || (echo "${builddir}/perl.exe missing"; exit)
    ## make the tests
    export PERLIO=perlio
    make -j1 test 2>&1 | tee ${dir}/log.test${exesuffix}
    grep '\.\.skip' ${dir}/log.test${exesuffix} > ${dir}/log.test.skipped${exesuffix}
    egrep -i '(\.#|\..FAIL| Fail)' ${dir}/log.test${exesuffix} > ${dir}/log.test.failed${exesuffix}
    if test -s ${dir}/log.test.failed${exesuffix}; then
	(cd t; ./perl harness) 2>&1 | tee ${dir}/log.harness${exesuffix}
    fi
    cd ${dir}
    stage_post_check_hook
  fi
}

stage_post_install_hook() {
    echo -n ""
}

stage_post_install_fixups() {
    __substage "post_install_fixups"
    find ${instdir} -name .packlist -exec sed -i -e"s,${instdir},," \{\} \;
    faclfixdir "${instdir}"
    chmod -R g-w ${instdir}${prefix}/bin ${instdir}${prefix}/lib/perl5
    chmod +x ${instdir}${prefix}/bin
    if [ -n "$exesuffix" ]; then
	cp ${instdir}${prefix}/bin/perl${longver}.exe ${instdir}${prefix}/bin/perl${longver}${exesuffix}.exe
    fi
    #echo compress manpages
    #find ${instdir}${prefix}/share/man ! -name \*.gz -exec gzip \{\} \;
    echo "symlink bin/cygperl dll to CORE/"
    pushd ${instdir}${prefix}/lib/perl5/${archver}/${archname}/CORE
    # better symlink absolut
    #ln -sf ../../../../../bin/${libperl}
    if [ "${pkg_ver}" = "perl-git" ]; then
	ln -sf /usr/local/bin/${libperl}
    else
	ln -sf /usr/bin/${libperl}
    fi
    popd
    pushd ${instdir}${prefix}/bin
    chmod +x *
    if [ -e scandeps.pl ]; then mv scandeps.pl scandeps; fi
    if [ -e "a2p${longver}.exe" -a ! -e "a2p.exe" ]; then # installperl -v (usedevel)
	for f in $(ls | grep -v "${archver}"); do
	    /usr/bin/mv $f $f${longver}
	done
	for x in *$ver; do r=$(basename $x $ver); ln -s $x $r; done
	for x in *$ver.exe; do r=$(basename $x $ver); cp $x $r; done
    fi
    popd
}

stage_install() {
  if [ -n "$stage_install" ]; then
    __stage "install"
make_all=1
    # versiononly will not install lib
    cd ${builddir}
    test -f perl.exe || (echo "${builddir}/perl.exe missing"; exit)
    rm -rf ${instdir}
    faclmkdir ${instdir}
    #rm -rf ${instdir}-unstripped

    ( make -j1 install DESTDIR=${instdir} 2>&1 | tee ${dir}/log.install${exesuffix} ) || exit

    # add documentation
    cd ${dir}
    mkdir -p ${instdir}${docdir}
    mkdir -p ${instdir}${prefix}/share/doc/Cygwin

    cd ${srcdir}
    /usr/bin/install -m 644 Artistic Copying README ${instdir}${docdir}
    /usr/bin/install -m 644 INSTALL Changes* ${instdir}${docdir}

    cd ${dir}
    /usr/bin/install -m 644 README ${instdir}${prefix}/share/doc/Cygwin/${pkg}.README 

    stage_post_install_hook
    if [ -n "$make_all" ]; then
	cd ${dir}
        stage_post_install_fixups
	cd ${dir}
	# since 5.10.1-3
	/usr/bin/install -m 755 perlrebase ${instdir}${prefix}/bin
        pod2man perlrebase.pod | gzip -c > ${instdir}${prefix}/share/man/man1/perlrebase.1.gz
        cd ${instdir}
        /usr/bin/rm -rf ../.instunstripped
        /usr/bin/mkdir  ../.instunstripped
        /usr/bin/find usr/bin usr/lib/perl5/${shortver}/i686-*/auto usr/lib/perl5/*_perl/${shortver}/i686-*/auto -type d -exec mkdir -p ../.instunstripped/\{\} \;
        /usr/bin/find . -name \*.exe -o -name \*.dll -exec cp \{\} ../.instunstripped/\{\} \;
        strip_debug
    fi
  fi
}

stage_installvendor() {
  if [ -n "$stage_installvendor" ]; then
    __stage "installvendor"
    instvdir=$instdir
    cd ${dir}
    if [ -e ${instdir}/usr/bin/perl${longver} ]; then
	PERL=${instdir}/usr/bin/perl${longver}
    fi
    if [ -z "$PERL" -a -n "$exesuffix" ]; then
	PERL=${instdir}/usr/bin/perl${longver}${exesuffix}
    fi
    if [ -z "$PERL" ]; then
      if [ -e ${instdir}/usr/bin/perl.exe ]; then
	PERL=${instdir}/usr/bin/perl.exe
      else
	PERL=`ls --color=no ${instdir}/usr/bin/perl*.exe`
      fi
    fi
    if [ -z "$PERL" ]; then PERL=perl${longver}; fi
    echo "install_vendor with $PERL"
    cd ${dir}
    logmake=${dir}/log.make_vendor${exesuffix}
    loginstall=${dir}/log.install_vendor${exesuffix}
    /usr/bin/rm $logmake $loginstall 2> /dev/null

    # BIG TODO: Config.pm must be absolute here. And we need the currently rebases files, not the old ones.
    # So we overwrite the previous archlib installation without backup
    /usr/bin/mkdir -p ${prefix}/lib/perl5/${archver}/${archname}
    echo "cp -rpf ${instdir}${prefix}/lib/perl5/${archver}/${archname}/* ${prefix}/lib/perl5/${archver}/${archname}/" | tee -a $logmake
    /usr/bin/cp -rpf ${instdir}${prefix}/lib/perl5/${archver}/${archname}/* ${prefix}/lib/perl5/${archver}/${archname}/

    PERL_I=$PERL # "-I${prefix}/lib/perl5/${archver}/${archname} -I${instdir}${prefix}/lib/perl5/${archver}/${archname} -I${instdir}${prefix}/lib/perl5/${archver} -I${instdir}${prefix}/lib/perl5/vendor_perl/${archver}/${archname} -I${instdir}${prefix}/lib/perl5/vendor_perl/${archver}"
    # CPAN, libXML and more
    for i in $exts
    do 
        echo rm -rf ${i} | tee -a $logmake
        /usr/bin/rm -rf ${i}
	echo tar xvzf ${i}.tar.gz | tee -a $logmake
        if [ ! -e ${i}.tar.gz ]; then echo "${i}.tar.gz does not exist"; exit; fi
	(/usr/bin/tar xvzf ${i}.tar.gz 2>&1 || exit) | /usr/bin/tee -a $logmake
	echo cd ${dir}/${i} | tee -a $logmake
	cd ${dir}/${i}
	if test -f ${dir}/$i.patch; then
	    __substage "${i}: patch -b -f -p1 ../$i.patch" | /usr/bin/tee -a $logmake
	    /usr/bin/patch -b -f -p1 < ${dir}/$i.patch 2>&1 | /usr/bin/tee -a $logmake
	    /usr/bin/find -name \*.orig -exec chmod 0444 \{\} \;
	fi
#       if test -f ppport.h; then
#	    mv ppport.h ppport.h.orig && ${builddir}/perl -I${builddir}/ext -MDevel::PPPort -e Devel::PPPort::WriteFile
#           cd ${dir}; mv -fb $i.patch $i.patch~; difforig $i > $i.patch; cd ${dir}/${i}
#       fi
	if [ -e Makefile.PL ]; then        
	  __substage "${i}: $PERL_I Makefile.PL" | /usr/bin/tee -a $logmake
          #PERL="$PERL_I" 
          opts=
          if [ ${i#Crypt-SSLeay} != $i ]; then opts=-default -lib=/usr -live; fi
	  PATH="${instdir}${prefix}/bin:$PATH" $PERL_I Makefile.PL $opts 2>&1 | tee -a $logmake
	  __substage "${i}: make" | tee -a $logmake
	  /usr/bin/make -j1 2>&1 >> $logmake
	  if [ $? -gt 0 ]; then
	      echo "make exitcode $?. Aborted"
	      exit
	  fi
          #XXX Some not to vendor. Most do it automatically
	  if [ ${i#ExtUtils-ParseXS} != $i -o ${i#ExtUtils-CBuilder}  != $i ]; then
	    __substage "${i}: make install DESTDIR=${instvdir}" | /usr/bin/tee -a $loginstall
	    make -j1 install DESTDIR=${instvdir} 2>&1 | /usr/bin/tee -a $loginstall
          else
	    __substage "${i}: make install_vendor DESTDIR=${instvdir}" | /usr/bin/tee -a $loginstall
	    make -j1 install_vendor DESTDIR=${instvdir} 2>&1 | /usr/bin/tee -a $loginstall
          fi
        else
	  __substage "${i}: $PERL_I Build.PL --destdir=${instvdir} --installdirs=vendor" | /usr/bin/tee -a $logmake
	  PATH="${instdir}${prefix}/bin:$PATH" $PERL_I Build.PL --destdir=${instvdir} --installdirs=vendor 2>&1 | tee -a $logmake
	  __substage "${i}: Build" | tee -a $logmake
	  ./Build 2>&1 | tee -a $logmake
	  __substage "${i}: Build install" | tee -a $loginstall
	  ./Build install 2>&1 | tee -a $loginstall
        fi
	cd ${dir}
	/usr/bin/rm -rf ${dir}/${i}
    done
    /usr/bin/find ${instvdir} -name .packlist -exec sed -i -e"s,${instdir},," \{\} \;

    #for taint
    /usr/bin/chmod -R g-w ${instvdir}/usr/bin ${instvdir}/usr/lib/perl5/vendor_perl/

    stage_post_install_fixups
    if [ -e ${instvdir}${prefix}/scandeps.pl ]; then mv ${instvdir}${prefix}/scandeps.pl ${instvdir}${prefix}/scandeps; fi
    cd ${instvdir}
    if [ -n "$make_all" ]; then
        /usr/bin/mkdir ../.instunstripped
        /usr/bin/find . -name \*.exe -o -name \*.dll -exec cp \{\} ../.instunstripped/\{\} \;
    fi
    ## rebase again with all dlls
    /usr/bin/find ${instdir} -name \*.dll -exec chmod +x,u+w \{\} \;
    rebase_all
    if [ -n "$make_all" ]; then strip_debug; fi
    cd $dir

  fi
}

stage_spkg_hook() {
    echo -n ""
}
stage_pkg_hook() {
    echo -n ""
}

stage_pkg() {
  if [ -n "$stage_pkg" ]; then
    __stage "pkg"
    # src
    cd $dir
    # check if to be updated or created anew
    if [ ! -d ${pkg}-${ver}${release} ]; then
	rm ${pkg}-${ver}${release}-src.tar.bz2 2>/dev/nul
	rm -rf ${pkg}-${ver}${release}
	sleep 2
	mkdir ${pkg}-${ver}${release}
	cp ${pkg}-${ver}.tar.{gz,bz2} ${pkg}-${ver}${release}/
    fi
    cp -p README setup.hint pl-*.patch build perlrebase perlrebase.pod build_common modules ${pkg}-${ver}${release}/
    for i in $exts; do 
	cp $i.tar.gz $i.patch ${pkg}-${ver}${release}/ 2>/dev/null
    done
    for i in log.*${exesuffix}; do cp ${i} ${pkg}-${ver}${release}/${i}.rel; done
    stage_spkg_hook
    echo "## spkg ${pkg}-${ver}${release}-src.tar.bz2"
    tar cjf ${pkg}-${ver}${release}-src.tar.bz2 ${pkg}-${ver}${release}

    files=${dir}/pkg.files
    cd ${instdir}
    find usr/lib/debug -type f -print > ${files}.debuginfo
    vendorbin="pod_cover crc32 ptee shasum cpansign lwp-download lwp-dump lwp-mirror lwp-request ipcount iptab json_xs metabase-profile findrule cpaninject scandeps"
    find usr/lib/perl5/vendor_perl \( -type f -o -type l \) -print > ${files}.vendor
    find usr/bin usr/lib/perl5/${archver}/ usr/share/doc \( -type f -o -type l \) -print > ${files}.perl
    for v in $vendorbin; do
      echo "usr/bin/$v" >> ${files}.vendor
      sed -i -e"s,usr/bin/$v,," ${files}.perl
    done
    touch usr/lib/perl5/site_perl/${archver}/${archname}/.create
    echo usr/lib/perl5/site_perl/${archver}/${archname}/.create >>${files}.perl

    cd ${instdir}
    echo compress manpages
    find ${instdir}${prefix}/share/man -type f ! -name \*.gz -exec gzip \{\} \;
    find ${instdir}${prefix}/share/man -type f ! -name \*.gz -delete
    find usr/share/man -type f -print > ${files}.manpages
    tar -c -T ${files}.manpages | bzip2 -9 > ${dir}/${pkg}_manpages-${ver}${release}.tar.bz2
    echo "## pkg ${pkg}_manpages-${ver}${release}.tar.bz2"
    tar tfj ${dir}/${pkg}_manpages-${ver}${release}.tar.bz2 > ${dir}/${pkg}_manpages-${ver}${release}.lst

    cd ${instdir}
    stage_pkg_hook
    echo "## pkg ${pkg}_debuginfo-${ver}${release}.tar.bz2"
    tar -c -T ${files}.debuginfo | bzip2 -9 > ${dir}/${pkg}_debuginfo-${ver}${release}.tar.bz2
    echo "## pkg ${pkg}_vendor-${ver}${release}.tar.bz2"
    tar -c -T ${files}.vendor | bzip2 -9 > ${dir}/${pkg}_vendor-${ver}${release}.tar.bz2
    # bin
    echo "## pkg ${pkg}-${ver}${release}.tar.bz2"
    tar -c -T ${files}.perl | bzip2 -9 > ${dir}/${pkg}-${ver}${release}.tar.bz2
    cd ${dir}
    echo "## pkg ${pkg}-${ver}${release}.lst"
    tar tfj ${pkg}-${ver}${release}.tar.bz2 > ${pkg}-${ver}${release}.lst
    cd ${dir}
  fi
}

## stages
stages="cpan vendorprep prep configure make check install installvendor pkg"
enable_stage() {
    if  [ -z "$enable_stage" ]; then
	for stage in $stages; do unset stage_${stage}; done
	enable_stage=1
    fi
    while test -n "$1" ; do
	let "stage_${1}=1"
	shift
    done
}

help() {
    echo "$0 [OPTIONS] [stages...]"
    echo "OPTIONS: --help|--version|--nothreads|--debug"
    echo    "STAGES: all almostall"
    echo -n "       "
    for stage in $stages; do echo -n " ${stage}"; done
    echo ""
}

version() {
    echo pkg_ver=$pkg_ver
    echo "ver=$ver	release=$release"
    echo "shortver=$shortver	longver=$longver"
    echo "major=$major		minor=$minor"
    echo usethreads=$usethreads
    echo archname=$archname
}

################################################################################

if [ -z "$builddir" ];   then 
    if [ "$usethreads" = "no" ]; then
	if [ -z "$make_debug" ]; then builddir=${dir}/buildnothreads
	else builddir=${dir}/buildntdebug
	fi
    else
	if [ -z "$make_debug" ]; then builddir=${dir}/buildperl
	else builddir=${dir}/builddebug
	fi
    fi
fi
if [ -z "$instdir" ];    then 
    if [ "$usethreads" = "no" ]; then
	if [ -z "$make_debug" ]; then instdir=${dir}/instnothreads
	else instdir=${dir}/instntdebug
	fi
    else
	if [ -z "$make_debug" ]; then instdir=${dir}/inst
	else instdir=${dir}/instdebug
	fi
    fi
fi
if [ -z "$archname" ]; then
    if [ "$usethreads" = "no" ]; then
	if [ -n "$make_debug" ]; then archname="i686-cygwin-64int-debug"
	else archname="i686-cygwin-64int"
	fi
    else
	if [ -n "$make_debug" ]; then archname="i686-cygwin-threads-64int-debug"; 
	else archname="i686-cygwin-threads-64int"
        fi
    fi
    #k=`uname -r`
    #if [ "${k:0:3}" != "1.5" ]; then archname="${archname}-${k:0:3}"; fi
fi
if [ -n "$make_debug" ]; then
  if [ "$usethreads" = "no" ]; then
    exesuffix=d-nt
  else
    exesuffix=d
  fi
else
  if [ "$usethreads" = "no" ]; then
    exesuffix=-nt
  else
    exesuffix=
  fi
fi
if [ -n "$patch" ]; then exesuffix="$exesuffix@$patch"; fi
if [ -n "$make_all" ]; then
  libperl="cygperl5_${minor}${exesuffix}.dll"
else
  libperl="cygperl5_${minor}_${subversion}${exesuffix}.dll"
fi

################################################################################

while test -n "$1" ; do
  case $1 in
    help|--help)	help; exit ;;
    version|--version)	version; exit ;;
    -D*|-U*)
	# pass to Configure
	CONF_ARGS="$CONF_ARGS $1"
	;;
    -A*)
	# pass also next arg to Configure, -A prepend:libswanted='cl pthread ', -A ccflags=-DSOME_MACRO 
	CONF_ARGS="$CONF_ARGS $1 $2"
	shift
	;;
    --nopatch|-np)
	# no platform patches, plain smoking
	__substage "prep_patch skipped"
	stage_prep_patch=__stage_empty
	;;
    --nothreads|--no-threads|-nt)
	usethreads="no"
	;;
    --debug|--debugging|-d)
	make_debug=1
	;;
    --no-mksymlinks|--no-s|-ns)
	CONF_no_mksymlinks=1
        ;;
    --strip-debug)
        cd ${instdir}
	strip_debug
        ;;
    all)
	make_all=1
	#make_debug=
	stage_cpan=
	stage_vendorprep=
	stage_prep=1
	stage_configure=1
	stage_make=1
	stage_check=1
	stage_install=1
	stage_installvendor=1
	stage_pkg=1
        ;;
    almostall)
	make_debug=
	stage_cpan=
	stage_vendorprep=
	stage_prep=
	stage_configure=1
	stage_make=1
	stage_check=1
	stage_install=1
	stage_installvendor=1
	stage_pkg=
        ;;
    undopatch)  
	enable_stage 1
	find ${srcdir} -type f -name '*.orig' -print | /usr/bin/sort | while read FILE
	do
	    NEW="`dirname $FILE`/`basename $FILE .orig`"
	    echo "$NEW" 1>&2
	    mv -f $FILE $NEW
	done 
	exit
	;;
    patch)
	enable_stage prep
	test -e ${srcdir} && echo "difforig ${srcdir} > difforig-`date +%Y-%m-%d-%H%M`.patch"
	test -e ${srcdir} && difforig ${srcdir} > difforig-`date +%Y-%m-%d-%H%M`.patch
	stage_prep_patch
	__substage "patch forces exit"
	exit
	;;
    cpan)       
	enable_stage cpan 
	stage_vendorprep=1
	;;
    vp|vprep|vendorprep) 
	enable_stage vendorprep 
	;;
    prep)
	enable_stage prep 
	;;
    c|cfg|conf|configure)	
	enable_stage configure 
	;;
    m|build|make)	
	enable_stage make 
	;;
    t|test|check)
	enable_stage check 
	;;
    i|install|inst) 
	enable_stage install 
	;;
    iv|installvendor|instvend) 
	enable_stage installvendor 
	;;
    package|pkg)
	enable_stage pkg 
	;;
    *)	
	echo "Invalid argument: $1"; 
	help 
	;;
  esac
  shift
done

